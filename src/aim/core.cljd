(ns aim.core
  (:require ["dart:io" :as io]
            [clojure.string :as string]))


(defn request->ring
  [^io/HttpRequest http-request]
  ;; https://api.dart.dev/stable/2.17.1/dart-io/HttpRequest-class.html
  ;; https://github.com/ring-clojure/ring/blob/master/SPEC
  (let [uri (.-uri http-request)
        certificate (.-certificate http-request)
        connection-info (.-connectionInfo http-request)
        remote-address (.-remoteAddress connection-info)]
    (cond-> {;;   (Required, Integer)
             ;;   The port on which the request is being handled.
             :server-port    (.-localPort connection-info)

             ;;   (Required, String)
             ;;   The resolved server name, or the server IP address.
             :server-name    (.-host remote-address)

             ;;   (Required, String)
             ;;   The IP address of the client or the last proxy that sent the request.
             :remote-addr    (.-address remote-address)

             ;;   (Required, String)
             ;;   The request URI, excluding the query string and the "?" separator.
             ;;   Must start with "/".
             :uri            (.-path uri)

             ;;  (Required, clojure.lang.Keyword)
             ;;  The transport protocol, must be one of :http or :https.
             :scheme         (if certificate :https :http)


             ;;  (Required, clojure.lang.Keyword)
             ;;  The HTTP request method, must be a lowercase keyword corresponding to a HTTP
             ;;  request method, such as :get or :post.
             :request-method (keyword (string/lower-case (.-method http-request)))

             ;;  (Required, clojure.lang.IPersistentMap)
             ;;  A Clojure map of downcased header name Strings to corresponding header value
             ;;  Strings. When there are multiple headers with the same name, the header
             ;;  values are concatenated together, separated by the "," character.
             :headers        (let [*headers (atom {})]
                               (.forEach (.-headers http-request)
                                 (fn [name values]
                                   (swap! *headers assoc name (string/join "," (map str values)))))
                               @*headers)

             ;; (Optional, java.io.InputStream)
             ;; An InputStream for the request body, if present.
             :body           http-request

             ;;  (Required, String)
             ;;  The protocol the request was made with, e.g. "HTTP/1.1".
             :protocol       (str "HTTP/" (.-protocolVersion http-request))}
      (.-hasQuery uri) (assoc
                         ;;   (Optional, String)
                         ;;   The query string, if present.
                         :query-string (.-query uri))
      certificate (assoc
                    ;;  (Optional, java.security.cert.X509Certificate)
                    ;;  The SSL client certificate, if supplied.
                    :ssl-client-cert certificate))))


(defn ->action-handler
  [ring-handler]
  (fn [^io/HttpRequest http-request]
    (let [ring-request (request->ring http-request)
          {:keys [status body headers]} (ring-handler ring-request)
          http-response (.-response http-request)
          http-headers (.-headers http-response)]
      (when status
        (set! (.-statusCode http-response) status))
      (doseq [[k v] headers]
        (.add http-headers (str k) (str v)))
      (cond
        (fn? body) (body http-response)
        (coll? body) (.writeAll http-response (mapv str body))
        body (.write http-response body))
      (.close http-response))
    nil))
